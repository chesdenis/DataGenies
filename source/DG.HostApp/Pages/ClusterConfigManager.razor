@page "/clusterconfigeditor"
@using System.Text.Json
@using DG.Core.Model.ClusterConfig
@using DG.Core.Services
@using Microsoft.Extensions.Options
@using DG.HostApp.Services
@inject IHttpService httpService
@inject IOptions<DG.Core.Model.ClusterConfig.Host> currentHost
@inject ClusterConfigService clusterConfigService


<h1>Cluster configuration manager</h1>
<button class="btn btn-outline-primary" @onclick="SetFormView">Form view</button>
<button class="btn btn-outline-primary" @onclick="SetRawView">Raw view</button>
<button class="btn btn-outline-primary" @onclick="ToggleFileUploadView">Upload JsonConfig</button>


@if (fileUploadView == true)
{
    <div class="drag-drop-zone">
        <InputFile OnChange="ViewFile" />
        @status
    </div>
}

@if (clusterConfig == null)
{
    <p><em>Loading configuration...</em></p>
}
else
{
    if (rawView == true)
    {
        <h2>Cluster configuration:</h2>
        <EditForm Model="@rawConfigAsJson" OnValidSubmit="@(async()=> await clusterConfigService.WriteConfig(clusterConfig,currentHost, rawView, rawConfigAsJson))">
            <InputTextArea style="height: 500px; width: 70%; resize:both;" @bind-Value="rawConfigAsJson" /> <br />
            <button class="btn btn-outline-primary" type="submit">Update config</button>
        </EditForm>
    }
    else
    {
        <CurrentHostCard ClusterConfig="clusterConfig" />
        <ClusterDefinitionGroup ClusterConfig="clusterConfig" />
    }
}
@code {

    private ClusterConfig clusterConfig;
    private string rawConfigAsJson = "{}";

    private bool fileUploadView = false;
    private const int MaxFileSize = 1 * 1024 * 1024; // 1MB
    private const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    private string fileToBigStatus = $"That's too big. Max size: {MaxFileSize} bytes.";
    private const string LoadingStatus = "Loading...";
    private string status = DefaultStatus;
    private bool rawView = false;

    protected override async Task OnInitializedAsync()
    {
        rawConfigAsJson = await clusterConfigService.ReadConfig(currentHost);
        SetFormView();
    }

    async Task ViewFile(IFileListEntry[] files)
    {
        string fileTextContents;

        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = fileToBigStatus;
        }
        else
        {
            status = LoadingStatus;

            using (var reader = new StreamReader(file.Data))
            {
                fileTextContents = await reader.ReadToEndAsync();
            }

            status = DefaultStatus;
            rawConfigAsJson = fileTextContents;

            rawView = true;
            fileUploadView = false;
        }
    }

    private void SetRawView()
    {
        rawConfigAsJson = JsonSerializer.Serialize(clusterConfig, new JsonSerializerOptions() { WriteIndented = true });
        this.rawView = true;
    }

    private void SetFormView()
    {
        this.clusterConfig = JsonSerializer.Deserialize<ClusterConfig>(rawConfigAsJson);
        this.rawView = false;
    }

    private void ToggleFileUploadView()
    {
        this.fileUploadView = !this.fileUploadView;
    }
}






