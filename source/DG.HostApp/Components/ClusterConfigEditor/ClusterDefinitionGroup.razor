@using DG.Core.Model.ClusterConfig
@using DG.HostApp.Services
@using Microsoft.Extensions.Options
@inject ClusterConfigService clusterConfigService
@inject IOptions<DG.Core.Model.ClusterConfig.Host> currentHost

<div class="card" style="width: 100%;">
    <div class="card-header">
        <h4> Cluster Definition:</h4>
        <p><b>HashMd5: </b>@ClusterConfig.ClusterDefinition.HashMD5, <b>Last update time: </b>@ClusterConfig.ClusterDefinition.LastUpdateTime</p>

        <ul class="nav nav-tabs card-header-tabs">
            @foreach (var key in elementsSettings.Keys)
            {
                <li class="nav-item">
                    <a class="nav-link" aria-selected="@elementsSettings[key][1]" @onclick="(async () => await Expand(key))" href="" @onclick:preventDefault>@key </a>
                </li>
            }
        </ul>
    </div>

    <div class="card-body tab-content">
        <div class="tab-pane fade @elementsSettings["Hosts"][0]">
            <HostsCard ClusterConfig="ClusterConfig" />
        </div>
        <div class="tab-pane fade @elementsSettings["Types"][0]">
            <div class="card-body">
                <ApplicationTypesCard ClusterConfig="ClusterConfig" />
            </div>
        </div>
        <div class="tab-pane fade @elementsSettings["Instances"][0]">
            <ApplicationInstancesCard ClusterConfig="ClusterConfig" />
        </div>
    </div>
    <EditForm Model="@ClusterConfig" OnValidSubmit="@(async()=> await clusterConfigService.WriteConfig(ClusterConfig, currentHost))">
        <div class="row">
            <div class="col-3">
                <button class="btn btn-outline-primary" type="submit">Update config</button>
            </div>
            <div class="col-3">
                <button class="btn btn-outline-primary" type="reset">Cancel changes</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public ClusterConfig ClusterConfig { get; set; }
    private string previousActive;
    private string currentActive = "Hosts";
    private Dictionary<string, string[]> elementsSettings = new Dictionary<string, string[]>()
{
        {"Hosts", new string[2]{  "show active" ,  "true"   } },
        { "Types",new string[2]{"","false" } },
        { "Instances",new string[2]{"","false" } }
    };

    private Task Expand(string elementName)
    {
        return Task.Run(() =>
        {
            {
                previousActive = currentActive;
                currentActive = elementName;
                elementsSettings[previousActive][0] = "";
                elementsSettings[previousActive][1] = "false";
                elementsSettings[elementName][0] = "show active";
                elementsSettings[elementName][1] = "true";
            }
        });
    }


}
