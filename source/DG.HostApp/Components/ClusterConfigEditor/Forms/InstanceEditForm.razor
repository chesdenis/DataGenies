@using DG.Core.Model.ClusterConfig
@using DG.Core.Model.Dto

<EditForm Model="@EditableInstance">
    <div class="instanceEdit-form">
        <div class="form-element">
            <label>Application instance name:</label>
            <InputText @bind-Value="EditableInstance.Name" />
        </div>
        <div class="form-element">
            <label>Application instance type:</label> @EditableInstance.Type <br/>
            <label>Set new instance type value:</label>
            <InputSelect @bind-Value="EditableInstance.Type" class="form-control">
                <option hidden></option>
                @foreach (var type in AvailableApplications)
                {
                    <option value="@type.Name">@type.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-element">
            <label>Hosting model:</label>
            <InputText @bind-Value="EditableInstance.HostingModel" />
        </div>
        <div class="form-element">
            <label>Placement policies:</label>
        </div>
            <PlacementPoliciesEditForm EditablePlacementPolicies="EditableInstance.PlacementPolicies"  OnHostChangeCallBack="@RefreshHost" />      
        <div class="form-element">
            <label>Count:</label>
            <InputText @bind-Value="EditableInstance.Count" />
        </div>
        <button class="btn btn-outline-primary" @onclick="SubmitForm">Submit</button>
    </div>
</EditForm>


@code {

    [Parameter]
    public ApplicationInstance EditableInstance { get; set; }

    [CascadingParameter]
    public List<ApplicationDto> AvailableApplications { get; set; }

    [Parameter]
    public EventCallback<ApplicationInstance> OnClickCallBack { get; set; }


    private async Task SubmitForm()
    {
        await OnClickCallBack.InvokeAsync(EditableInstance);
    }

    private void RefreshHost(List<string> hosts)
    {
        EditableInstance.PlacementPolicies = hosts;
    }

}
